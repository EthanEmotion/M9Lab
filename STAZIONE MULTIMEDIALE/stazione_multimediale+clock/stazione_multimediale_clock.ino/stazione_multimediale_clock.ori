// Questo sketch gestisce l'audio per la stazione multimediale di Trenino 2.0
// leggo ed eseguo da serial il comando in formato treno|binario //ex: TA|1, TA|2, TB|1, TB|2 ....
// Utilizza il DFPlayer e la sua libreria (da caricare)


// Info: caricare i file in SD:/MP3/0001.mp3, SD:/MP3/0002.mp3 ecc ecc
// esempio file audio da creare (treno in arrivo):
// "TA|1" -> Il treno Freccia Bianca 60051 è in arrivo al binario 1, allontanarsi dalla linea gialla -> SD:/MP3/0001.mp3
// "TA|2" -> Il treno Freccia Bianca 60051 è in arrivo al binario 2, allontanarsi dalla linea gialla -> SD:/MP3/0002.mp3
// "TB|1" -> Il treno Railway Express 4561 è in arrivo al binario 1, allontanarsi dalla linea gialla -> SD:/MP3/0003.mp3
// "TB|2" -> Il treno Railway Express 4561 è in arrivo al binario 2, allontanarsi dalla linea gialla -> SD:/MP3/0004.mp3
// "TB|1" -> Il treno Railway Express 4559 è in arrivo al binario 1, allontanarsi dalla linea gialla -> SD:/MP3/0003.mp3
// "TB|2" -> Il treno Railway Express 4559 è in arrivo al binario 2, allontanarsi dalla linea gialla -> SD:/MP3/0004.mp3
//Il treno Freccia Bianca, 60 0 5 1 , delle ore 15 e 03  è in arrivo al binario 1,. Attenzione, allontanarsi dalla linea gialla. 
// Cargo Railway
// TODO -> audio treno in partenza, poi vediamo ;)

// NOte: il bluetooth per ora è commentato, nel caso basta abilitarlo e configurarlo.


// 2019 Code by Stefx 
// ver 1.0.2

#include "Arduino.h"
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"
#include "RTClib.h"
#include <Wire.h>

RTC_DS1307 rtc;

SoftwareSerial mySoftwareSerial(10, 11); // RX, TX
//SoftwareSerialWire bluetooth(rxPin, txPin);

DFRobotDFPlayerMini myDFPlayer;
String track;
String train;

String readedString;

void setup(){

  mySoftwareSerial.begin(9600);
  Serial.begin(115200);
  
  Wire.begin(8);
  Wire.onReceive(receiveString);
  //Wire.onReceive(receiveEvent);
  
  
  if (! rtc.begin()) {
      Serial.println("Couldn't find RTC");
      while (1);
  }else{
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  if (! rtc.isrunning()) {
    Serial.println("RTC is NOT running!");
    // following line sets the RTC to the date & time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }


  Serial.println();
  Serial.println(F("DFRobot DFPlayer Mini Demo"));
  Serial.println(F("Initializing DFPlayer ... (May take 3~5 seconds)"));  
      
  //Use softwareSerial to communicate with mp3.   
  if (!myDFPlayer.begin(mySoftwareSerial)) {  
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while(true);
  }
  Serial.println(F("DFPlayer Mini online.")); 
  
  myDFPlayer.setTimeOut(500); //Set serial communictaion time out 500ms  
  myDFPlayer.volume(30);  //Set volume value (0~30).    
  myDFPlayer.EQ(DFPLAYER_EQ_NORMAL);
  myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);    
    
}

void loop(){   

  // leggo ed eseguo da serial il comando in formato treno|binario //ex: TA|1, TA|2 ....
  if (Serial.available()){    

    String text = Serial.readString();
    executeAudio(text.toInt());
    
  }      
  
  // debug su serial degli eventi del lettore mp3 (opzionale, da commentare)
  if (myDFPlayer.available()) {
    //Print the detail message from DFPlayer to handle different errors and states.
     printDetail(myDFPlayer.readType(), myDFPlayer.read()); 
  } 
  
}


void printDetail(uint8_t type, int value){
  switch (type) {
  case TimeOut:
    Serial.println(F("Time Out!"));
    break;
  case WrongStack:
    Serial.println(F("Stack Wrong!"));
    break;
  case DFPlayerCardInserted:
    Serial.println(F("Card Inserted!"));
    break;
  case DFPlayerCardRemoved:
    Serial.println(F("Card Removed!"));
    break;
  case DFPlayerCardOnline:
    Serial.println(F("Card Online!"));
    break;
  case DFPlayerUSBInserted:
    Serial.println("USB Inserted!");
    break;
  case DFPlayerUSBRemoved:
    Serial.println("USB Removed!");
    break;
  case DFPlayerPlayFinished:
    Serial.print(F("Number:"));
    Serial.print(value);
    Serial.println(F(" Play Finished!"));
    break;
  case DFPlayerError:
    Serial.print(F("DFPlayerError:"));
    switch (value) {
    case Busy:
      Serial.println(F("Card not found"));
      break;
    case Sleeping:
      Serial.println(F("Sleeping"));
      break;
    case SerialWrongStack:
      Serial.println(F("Get Wrong Stack"));
      break;
    case CheckSumNotMatch:
      Serial.println(F("Check Sum Not Match"));
      break;
    case FileIndexOut:
      Serial.println(F("File Index Out of Bound"));
      break;
    case FileMismatch:
      Serial.println(F("Cannot Find File"));
      break;
    case Advertise:
      Serial.println(F("In Advertise"));
      break;
    default:
      break;
    }
    break;
  default:
    break;
  }

}

void executeAudio(int command){

  Serial.print(command);

  String exx = String(command); // print the integer
  
  train = exx.charAt(0); // 1,2,3
  track = exx.charAt(1);    // 1,2,3....

  DateTime now = rtc.now();
  int currentMinute = now.minute();
  int currentHour = now.hour(); 
  
  //bip
  myDFPlayer.playMp3Folder(111);
  delay(4000); 
  
  // il treno
  myDFPlayer.playMp3Folder(121);
  delay(1200);

  
  // treno
  switch (train.toInt()) {      
    case 1:           
      myDFPlayer.playMp3Folder(201);  
      delay(1500);       
      myDFPlayer.playMp3Folder(65); //play specific mp3 in SD:/MP3/0001.mp3; File Name(0~65535)  
      delay(1500);
      myDFPlayer.playMp3Folder(100); //play specific mp3 in SD:/MP3/0001.mp3; File Name(0~65535)  
      delay(1000);
      myDFPlayer.playMp3Folder(100); //play specific mp3 in SD:/MP3/0001.mp3; File Name(0~65535)  
      delay(1000);
      myDFPlayer.playMp3Folder(1); //play specific mp3 in SD:/MP3/0001.mp3; File Name(0~65535)  
      delay(1000);                   
      break;
    case 2:       
      myDFPlayer.playMp3Folder(202);  
      delay(1500);          
      myDFPlayer.playMp3Folder(45); //play specific mp3 in SD:/MP3/0001.mp3; File Name(0~65535)  
      delay(1000);
      myDFPlayer.playMp3Folder(61); //play specific mp3 in SD:/MP3/0001.mp3; File Name(0~65535)  
      delay(1000);
      break;
      /*        
    case 3:                 
      myDFPlayer.playMp3Folder(203);  
      delay(1500);
      myDFPlayer.playMp3Folder(45); //play specific mp3 in SD:/MP3/0001.mp3; File Name(0~65535)  
      delay(1000);
      myDFPlayer.playMp3Folder(59); //play specific mp3 in SD:/MP3/0001.mp3; File Name(0~65535)  
      delay(1000);
      break;
      */                                                  
  }
    
  //di mezzanine lab
  myDFPlayer.playMp3Folder(140);
  delay(1500);
  
  //delle ore  
  myDFPlayer.playMp3Folder(131);
  delay(1200);

  //orario
  myDFPlayer.playMp3Folder(currentHour);
  delay(1200);
  myDFPlayer.playMp3Folder(135);
  delay(1000);
  int minute = convertIntTo2DigitString(currentMinute);
  myDFPlayer.playMp3Folder(minute);
  delay(2000);
  
  
  //e in arrivo al binario
  myDFPlayer.playMp3Folder(141);
  delay(2000);
  
  // n binario
  myDFPlayer.playMp3Folder(track.toInt());
  delay(1500);
  
  //avviso finale
  myDFPlayer.playMp3Folder(165); //play specific mp3 in SD:/MP3/0001.mp3; File Name(0~65535) 
  delay(3500); 
  myDFPlayer.playMp3Folder(191);

  return ;
      
} 

int convertIntTo2DigitString(int i)  {
  if (i < 10)  {
    i = i+100;
  }
  return i;
}

void receiveEvent(int howMany) {
		
  String text = "";
  while (Wire.available()) { 
    char c = Wire.read(); // receive a byte as character
    text += c;
  }
  Serial.print("Printing: ");
  Serial.println(text);
  
  executeAudio(text.toInt());    	  	
  
}

void receiveString(int bytes) {
  String text = "";
  while (Wire.available()) { 
    char c = Wire.read(); // receive a byte as character
    text += c;
  }
  Serial.print("Printing: ");
  Serial.println(text);

  executeAudio(text.toInt()); 
 
}


